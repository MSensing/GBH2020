//collect data through block partitioning

var index = []
for (var i=0;i< 1000; i++){
  index.push(i)
}

index.forEach(function(i){

// ---------------add the SHP for downloading the Images and extracting values of features.----------------
// ---------------The Id is a field used for looping----------------

//select region
var region = downloadImgRegion.filter(ee.Filter.eq('Id', i))
//select sample
var sampleBuffer = GEDI_based_building_height_sample.filter(ee.Filter.eq('Id', i))


var folder="downloadRegion_"; 
  

//functions
function selectTexture(imageCat,sizeNum,bandsNum){
  var tmpImage = imageCat.multiply(10000).toInt().glcmTexture({size:sizeNum});
  for (var ind=0; ind<=bandsNum-1;ind++){
    var imageSiftTmp=ee.Image.cat(
      tmpImage.select(18*ind+1,18*ind+3,18*ind+5,18*ind+14) 
    )
    if(ind===0){
      var imageSiftStack=ee.Image.cat(imageSiftTmp)
    }else{
      var imageSiftStack=ee.Image.cat(imageSiftStack,imageSiftTmp)
    }
  }
  return imageSiftStack
}
// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  var cloudShadowBitMask = (1 << 4); 
  var cloudsBitMask = (1 << 3); 
  var qa = image.select('QA_PIXEL'); 
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0) 
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0)); 

  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true).updateMask(mask)
              .copyProperties(image)
              .copyProperties(image, ["system:time_start"]);
}


//------------ Landsat8 gain & pre-processing----------------
var l8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2').filterBounds(region)
    .filterDate('2020-01-01', '2021-12-31').filter(ee.Filter.lt("CLOUD_COVER",30))
    .map(applyScaleFactors).map(function(image){
                          var blue=image.select("SR_B2").rename("blue");
                          var green=image.select("SR_B3").rename("green");
                          var red=image.select("SR_B4").rename("red");
                          var nir=image.select("SR_B5").rename("nir");
                          var swir1=image.select("SR_B6").rename("s1");
                          var swir2=image.select("SR_B7").rename("s2");
                
                          var ndvi=image.expression(
                                "(B5-B4)/(B5+B4)",
                             {
                              "B5":nir,
                                "B4":red
                             }
                            ).rename("V_NDVI");
                          
                          var ndbi=image.expression(
                                "(B6-B5)/(B6+B5)",
                             {
                              "B6":swir1,
                              "B5":nir
                             }
                            ).rename("V_NDBI");
                          
                          var d6_4=image.expression(
                                "B6-B4",
                             {
                              "B6":swir1,
                              "B4":red
                             }
                            ).rename("V_DVI64");
                            
                          var r6_4=image.expression(
                                "B6/B4",
                             {
                              "B6":swir1,
                              "B4":red
                             }
                            ).rename("V_RVI64");
                          
                          var mndwi=image.expression(
                                "(B6-B5)/(B6+B5)",
                             {
                              "B6":green,
                              "B5":swir1
                             }
                            ).rename("V_mNDWI");
                          
                          return image.addBands(ndvi).addBands(ndbi).addBands(d6_4)
                                  .addBands(r6_4).addBands(mndwi);
                          });
                          
print(l8.size())


//------------Sentinel-2 gain & pre-processing-------------    
var s2Sr = ee.ImageCollection('COPERNICUS/S2_SR').filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20));
var s2Clouds = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY');

var START_DATE = ee.Date('2020-01-01');
var END_DATE = ee.Date('2021-12-31');
var MAX_CLOUD_PROBABILITY = 80;


function maskClouds(img) {
  var clouds = ee.Image(img.get('cloud_mask')).select('probability');
  var isNotCloud = clouds.lt(MAX_CLOUD_PROBABILITY);
  return img.updateMask(isNotCloud);
}

// The masks for the 10m bands sometimes do not exclude bad data at
// scene edges, so we apply masks from the 20m and 60m bands as well.

function maskEdges(s2_img) {
  return s2_img.updateMask(
      s2_img.select('B8A').mask().updateMask(s2_img.select('B9').mask())).updateMask(
      s2_img.select('B11').mask().updateMask(s2_img.select('B9').mask())).updateMask(
      s2_img.select('B12').mask().updateMask(s2_img.select('B9').mask()));
}

// Filter input collections by desired data range and region.
var criteria = ee.Filter.and(
    ee.Filter.bounds(region), ee.Filter.date(START_DATE, END_DATE));
s2Sr = s2Sr.filter(criteria).map(maskEdges);
s2Clouds = s2Clouds.filter(criteria);

// Join S2 SR with cloud probability dataset to add cloud mask.
var s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: s2Sr,
  secondary: s2Clouds,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});

var s2 = ee.ImageCollection(s2SrWithCloudMask).map(maskClouds).map(function(image){
                            var blue=image.select("B2").multiply(0.0001).rename("B2");
                            var green=image.select("B3").multiply(0.0001).rename("B3");
                            var red=image.select("B4").multiply(0.0001).rename("B4");
                            var nir=image.select("B8").multiply(0.0001).rename("B8");
                            var n5=image.select("B5").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B5");
                            var n6=image.select("B6").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B6");
                            var n7=image.select("B7").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B7");
                            var n8a=image.select("B8A").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B8A");
                            
                            var swir1=image.select("B11").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B11");
                            var swir2=image.select("B12").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B12");
                            var ndvi=image.expression(
                                "(B5-B4)/(B5+B4)",
                             {
                              "B5":nir,
                                "B4":red
                             }
                            ).rename("X10m_NDVI");
                          
                          var ndbi=image.expression(
                                "(B6-B5)/(B6+B5)",
                             {
                              "B6":swir1,
                              "B5":nir
                             }
                            ).rename("X10m_NDBI");
                            
                          var mndwi=image.expression(
                                "(B6-B5)/(B6+B5)",
                             {
                              "B6":green,
                              "B5":swir1
                             }
                            ).rename("X10m_mNDWI");
                         
                          
                          var d6_4=image.expression(
                                "B6-B4",
                             {
                              "B6":swir1,
                              "B4":red
                             }
                            ).rename("X10m_DVI64");
                            
                          var r6_4=image.expression(
                                "B6/B4",
                             {
                              "B6":swir1,
                              "B4":red
                             }
                            ).rename("X10m_RVI64");
                          
                            return image.addBands(ndvi).addBands(ndbi).addBands(d6_4).addBands(r6_4)
                                  .addBands(mndwi)
                                  ;
                          })    
print("Sentinel2",s2.size())

//------------------------------------------------------------------------------------------
//----------recommend this code for the pre-processing of the Sentinel-2 data---------
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask);
}

var s2 = ee.ImageCollection('COPERNICUS/S2_SR')
                  .filterDate('2020-01-01', '2021-12-31').filterBounds(region)
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .map(maskS2clouds).map(function(image){
                            var blue=image.select("B2").multiply(0.0001).rename("X10m_B2");
                            var green=image.select("B3").multiply(0.0001).rename("X10m_B3");
                            var red=image.select("B4").multiply(0.0001).rename("X10m_B4");
                            var nir=image.select("B8").multiply(0.0001).rename("X10m_B8");
                            var n5=image.select("B5").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B5");
                            var n6=image.select("B6").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B6");
                            var n7=image.select("B7").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B7");
                            var n8a=image.select("B8A").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B8A");
                            
                            var swir1=image.select("B11").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("X10m_SWIR1");
                            var swir2=image.select("B12").multiply(0.0001).resample('bicubic').reproject({crs:nir.projection().crs(),scale:10}).rename("B12");
                            var ndvi=image.expression(
                                "(B5-B4)/(B5+B4)",
                             {
                              "B5":nir,
                                "B4":red
                             }
                            ).rename("X10m_NDVI");
                          
                          var ndbi=image.expression(
                                "(B6-B5)/(B6+B5)",
                             {
                              "B6":swir1,
                              "B5":nir
                             }
                            ).rename("X10m_NDBI");
                            
                          var mndwi=image.expression(
                                "(B6-B5)/(B6+B5)",
                             {
                              "B6":green,
                              "B5":swir1
                             }
                            ).rename("X10m_mNDWI");
                         
                          
                          var d6_4=image.expression(
                                "B6-B4",
                             {
                              "B6":swir1,
                              "B4":red
                             }
                            ).rename("X10m_DVI64");
                            
                          var r6_4=image.expression(
                                "B6/B4",
                             {
                              "B6":swir1,
                              "B4":red
                             }
                            ).rename("X10m_RVI64");
                          
                            return image.addBands(blue).addBands(red).addBands(green).addBands(nir)
                                  .addBands(swir1).addBands(ndvi).addBands(ndbi)
                                  .addBands(mndwi).addBands(d6_4).addBands(r6_4)
                                  ;
                          })    
print("Sentinel2",s2.size())



//---Sentinel-1----gain data----	
var s1=ee.ImageCollection("COPERNICUS/S1_GRD").filterDate("2020-01-01","2020-12-31")
          .filterBounds(region)
          .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
          .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
          .filter(ee.Filter.eq('instrumentMode', 'IW'))
          .map(function(image){
                                                 return image;
                                                });
print("Sentinel1",s1.size())


//--------compute the multitemporal statistical features---------
//Landsat8 features
var l8var=l8.reduce(ee.Reducer.variance());
var l8mean=l8.reduce(ee.Reducer.mean());
var l8p0=l8.reduce(ee.Reducer.percentile([0]));
var l8p10=l8.reduce(ee.Reducer.percentile([10]));
var l8p25=l8.reduce(ee.Reducer.percentile([25]));
var l8p90=l8.reduce(ee.Reducer.percentile([90]));


//Sentinel1 features                     
var s1var=s1.reduce(ee.Reducer.variance());
var s1mean=s1.reduce(ee.Reducer.mean());
var s1p0=s1.reduce(ee.Reducer.percentile([0]));
var s1p10=s1.reduce(ee.Reducer.percentile([10]));
var s1p25=s1.reduce(ee.Reducer.percentile([25]));
var s1p90=s1.reduce(ee.Reducer.percentile([90]));
var s1p100=s1.reduce(ee.Reducer.percentile([100]));


//Sentinel2 stats                          
var s2var=s2.reduce(ee.Reducer.variance());
var s2mean=s2.reduce(ee.Reducer.mean());
var s2p0=s2.reduce(ee.Reducer.percentile([0]));
var s2p10=s2.reduce(ee.Reducer.percentile([10]));
var s2p25=s2.reduce(ee.Reducer.percentile([25]));
var s2p90=s2.reduce(ee.Reducer.percentile([90]));



//-------------- Project the image to Mollweide.-----------------
var wkt = ' \
  PROJCS["World_Mollweide", \
    GEOGCS["GCS_WGS_1984", \
      DATUM["WGS_1984", \
        SPHEROID["WGS_1984",6378137,298.257223563]], \
      PRIMEM["Greenwich",0], \
      UNIT["Degree",0.017453292519943295]], \
    PROJECTION["Mollweide"], \
    PARAMETER["False_Easting",0], \
    PARAMETER["False_Northing",0], \
    PARAMETER["Central_Meridian",0], \
    UNIT["Meter",1], \
    AUTHORITY["EPSG","54009"]]';
 
//----------set World Mollweide projection--------------
//the mask data
var wsf2019 = ee.ImageCollection("projects/sat-io/open-datasets/WSF/WSF_2019");
var wsf2019mosaic = wsf2019.mosaic()
    .setDefaultProjection({crs:"EPSG:4326",scale:10})

var proj_mollweide = ee.Projection(wkt);

var wsfPrj = wsf2019mosaic.reproject({
      crs:proj_mollweide,
      scale:10
    })   

//-------merge--------
var varL8Col=ee.Image.cat(
  l8mean.select("V.+"),
  l8var.select("V.+"),
  l8p10.select("V.+"),
  l8p25.select("V.+"),
  l8p90.select("V.+")
).setDefaultProjection({crs:"EPSG:4326",scale:30}).reproject({
      crs:proj_mollweide,
      scale:30
    });
print("L8",varL8Col)

var varS2Col=ee.Image.cat(
  s2mean.select("X10m.+"),
  s2var.select("X10m.+"),
  s2p10.select("X10m.+"),
  s2p25.select("X10m.+"),
  s2p90.select("X10m.+")
).setDefaultProjection({crs:"EPSG:4326",scale:10}).reproject({
      crs:proj_mollweide,
      scale:10
    });
print("S2",varS2Col)

var varS1Col=ee.Image.cat(
  s1mean.select("V.+"),s1var.select("V.+"),
  s1p0.select("V.+"),s1p10.select("V.+"),s1p25.select("V.+"),
  s1p90.select("V.+"),s1p100.select("V.+")
).setDefaultProjection({crs:"EPSG:4326",scale:10}).reproject({
      crs:proj_mollweide,
      scale:10
    });
print("S1 ",varS1Col)


//--------DEM features---------
var dem = ee.Image("projects/sat-io/open-datasets/ASTER/GDEM").setDefaultProjection({crs:"EPSG:4326",scale:10})
var aspect = ee.Terrain.aspect(dem)
var slope = ee.Terrain.slope(dem)
var d = ee.Image.cat(
    dem,
    aspect,
    slope
).setDefaultProjection({crs:"EPSG:4326",scale:10}).reproject({
      crs:proj_mollweide,
      scale:30
    })

//--------------to ImageCollection--------------------
var L8col =ee.ImageCollection([varL8Col.updateMask(wsfPrj).set('system:time_start', ee.Date('2000-01-01').millis())])
var S1col =ee.ImageCollection([varS1Col.updateMask(wsfPrj).set('system:time_start', ee.Date('2000-01-01').millis())])
var S2col =ee.ImageCollection([varS2Col.updateMask(wsfPrj).set('system:time_start', ee.Date('2000-01-01').millis())])


//---------Texture features--------------
//Sentinel2
var varS2Colsize5=ee.ImageCollection([selectTexture(varS2Col.updateMask(wsfPrj),5,25).set('system:time_start', ee.Date('2000-01-01').millis())])

//Sentinel1
var varS1size6=ee.ImageCollection([selectTexture(varS1Col.updateMask(wsfPrj),6,14).set('system:time_start', ee.Date('2000-01-01').millis())])

//Landsat8
var varL8size2=ee.ImageCollection([selectTexture(varL8Col.updateMask(wsfPrj),2,25).set('system:time_start', ee.Date('2000-01-01').millis())])



//---------------extract values of features (Landsat8, Sentinel2, Sentinel1)-----------
var params10={
  scale:10,
  crs:proj_mollweide
}
var params30={
  scale:30,
  crs:proj_mollweide  
}

var L8Stats=zonalStats(L8col, sampleBuffer, params30)
var S1Stats=zonalStats(S1col, sampleBuffer, params10)
var S2Stats=zonalStats(S2col, sampleBuffer, params10)

var L8s2Stats=zonalStats(varL8size2, sampleBuffer, params30);
var S1s6Stats=zonalStats(varS1size6, sampleBuffer, params10);
var S2s5StatsCol=zonalStats(varS2Colsize5, sampleBuffer, params10)


//--------------extract DEM values--------------
var dCol= ee.ImageCollection([d.updateMask(wsfPrj).set('system:time_start', ee.Date('2000-01-01').millis())])

var demStats=zonalStats(dCol, sampleBuffer, params30);




//----------Export the csv files containing values of independent variables--------------
Export.table.toDrive({
  collection: L8Stats,
  description:'L8_stats',
  folder:folder,
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: S1Stats,
  description:'S1_stats',
  folder:folder,
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: S2Stats,
  description:'S2_stats',
  folder:folder,
  fileFormat: 'CSV'
});


Export.table.toDrive({
  collection: L8s2Stats,
  description:'L8s2_stats',
  folder:folder,
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: S2s5StatsCol,
  description:'S2s5_stats',
  folder:folder,
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: S1s6Stats,
  description:'S1s6_stats',
  folder:folder,
  fileFormat: 'CSV'
});

Export.table.toDrive({
  collection: demStats,
  description:'StrmStats',
  folder:folder,
  fileFormat: 'CSV'
})



//--------------Export the independent variables-------------- 
var l8s1s2=ee.Image.cat(
   varL8Col.updateMask(wsfPrj).reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels:64
    }).reproject({
      crs:proj_mollweide,
      scale:150
    }),
   selectTexture(varL8Col.updateMask(wsfPrj),2,25).reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 64
    }).reproject({
      crs:proj_mollweide,
      scale:150
    }),
   varS1Col.updateMask(wsfPrj).reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 225
    }).reproject({
      crs:proj_mollweide,
      scale:150
    }),
   selectTexture(varS1Col.updateMask(wsfPrj),6,14).reproject({
      crs:proj_mollweide,
      scale:10
    }).reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 225
    }).reproject({
      crs:proj_mollweide,
      scale:150
    }),
   varS2Col.updateMask(wsfPrj).reproject({
      crs:proj_mollweide,
      scale:10
    }).reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 225
    }).reproject({
      crs:proj_mollweide,
      scale:150
    }),
   selectTexture(varS2Col.updateMask(wsfPrj),5,25).reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 225
    }).reproject({
      crs:proj_mollweide,
      scale:150
    }),
   d.double().updateMask(wsfPrj).reduceResolution({
      reducer: ee.Reducer.mean(),
      maxPixels: 225
    }).reproject({
      crs:proj_mollweide,
      scale:150
    })
)

Export.image.toDrive({
  image:l8s1s2,
  description:"ImgBlocks"+i,
  folder:folder+i,
  region:region,
  scale:150,
  crs:' \
  PROJCS["World_Mollweide", \
    GEOGCS["GCS_WGS_1984", \
      DATUM["WGS_1984", \
        SPHEROID["WGS_1984",6378137,298.257223563]], \
      PRIMEM["Greenwich",0], \
      UNIT["Degree",0.017453292519943295]], \
    PROJECTION["Mollweide"], \
    PARAMETER["False_Easting",0], \
    PARAMETER["False_Northing",0], \
    PARAMETER["Central_Meridian",0], \
    UNIT["Meter",1], \
    AUTHORITY["EPSG","54009"]]',
  maxPixels:1e13,
  shardSize:25,
  fileDimensions:[25,25],
  skipEmptyTiles:true,
  fileFormat:"GeoTIFF"
})

})



